name: Infrastructure
run-name: Infrastructure
on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Stage for environment (dev, stage, prod)"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - prod
permissions:
  id-token: write
  contents: read

jobs:
  check-bucket-exists:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set AWS Region and Assume Role based on Stage
        id: set-aws-vars
        run: |
          if [ "${{ inputs.stage }}" == "dev" ]; then
            echo "AWS_REGION=${{ secrets.AWS_REGION_DEV }}" >> "$GITHUB_ENV"
            echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN_DEV }}" >> "$GITHUB_ENV"
          elif [ "${{ inputs.stage }}" == "qa" ]; then
            echo "AWS_REGION=${{ secrets.AWS_REGION_QA }}" >> "$GITHUB_ENV"
            echo "AWS_ROLE_ARN=${{ secrets.AWS_ROLE_ARN_QA }}" >> "$GITHUB_ENV"
          fi

      # Paso 2: Configurar las credenciales de AWS después de que las variables se establezcan correctamente
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }} # Usar el rol dinámico
          aws-region: ${{ env.AWS_REGION }} # Usar la región dinámica

      - name: Check if bucket exists
        run: |
          if aws s3api head-bucket --bucket "${{ vars.TERRAFORM_BUCKET_NAME }}-${{ inputs.stage }}" 2>/dev/null; then
            echo "Bucket ${{ vars.TERRAFORM_BUCKET_NAME }}-${{ inputs.stage }} already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Bucket ${{ vars.TERRAFORM_BUCKET_NAME }}-${{ inputs.stage }} does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create bucket if it does not exist
        id: create-bucket
        if: env.exists == 'false'
        run: |
          aws s3api create-bucket --bucket "${{ vars.TERRAFORM_BUCKET_NAME }}-${{ inputs.stage }}" --region "${{ env.AWS_REGION }}" --create-bucket-configuration LocationConstraint="${{ env.AWS_REGION }}"
          echo "Bucket ${{ vars.TERRAFORM_BUCKET_NAME }}-${{ inputs.stage }} created"
          echo "Bucket created successfully"
